<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JVM笔记-内存模型]]></title>
    <url>%2F2018%2F06%2F18%2FJVM%E7%AC%94%E8%AE%B0-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[JVM 运行时数据区数据区划分 程序计数器 方法区 栈 虚拟机栈 本地方法栈 堆 各区域要点程序计数器线程私有，当前线程所执行的字节码的指令指示器。 方法区线程共享，存储已被虚拟机加载的类信息、常量、静态变量、编译后的代码等数据,是堆的一个逻辑部分，常量池是方法区的一部分。由于方法区的对象回收较为严格，一般回收算法有别于堆区，不同版本虚拟机实现不同。通过MaxPermSize 设置最大方法区容量。 栈线程私有，分为虚拟机栈（Java代码栈）和本地方法栈。 虚拟机栈用于描述Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接，每一个方法从调用到返回的过程，就对应一个栈帧在虚拟机占中入栈到出栈过程。局部变量表所需的内存大小在编译期间便确定，在方法执行期间不会改变局部变量表的大小。栈的最大深度受虚拟机允许的最大深度以及线程栈大小限制，可通过-Xss设置。 本地方法栈用于描述本地方法执行的内存模型，Sun HotSpot 虚拟机将本地方法栈和虚拟机栈合并。 堆线程共享，用于存放Java对象实例，在JVM启动时创建，是JVM自动垃圾回收的主要区域。为便于回收有些虚拟机将堆进一步划分成新生代、老年代，采用分代收集算法。可通过-Xmx参数设置最大堆大小，-Xms设置堆初始化大小。 对象的内存布局 对象头 对象运行时数据： 哈希码、GC分代年龄、线程持有的锁，一般用32位或64位的BitMap结构记录。 类型引用：即对象类元数据对象的引用 实例数据：对象字段内容 对齐填充 对象的访问 句柄访问：对象引用中为句柄池中的句柄地址，由句柄指向真实的对象，当对象地址改变是对象引用无感知 直接访问：速度快（HotSpot） 周志明. 深入理解Java虚拟机[M]. 机械工业出版社, 2013.]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring AOP]]></title>
    <url>%2F2018%2F05%2F20%2FSpring-Aop%2F</url>
    <content type="text"><![CDATA[关键词 AOP：面向切面编程 Advice（通知）：定义连接点做什么，为切面增强提供织入接口 Pointcut（切点）：决定Advice通知应该作用于哪个连接点 Advisor（通知器）：用于关联Advice和Pointcut，定义某个通知应该作用于哪个切点 实现：动态代理（JDK Proxy或CGLIB）、IOC]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring AOP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建GitHub Pages]]></title>
    <url>%2F2018%2F05%2F13%2F%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAGitHub-Pages%2F</url>
    <content type="text"><![CDATA[预备环境搭建 预备环境搭建 主题选择 主题更换为NexT NexT配置文档 找不到git username问题：通过将git版本升级到最新（windows 2.17.0）解决 部署到GitHub Pages仓库master分支（默认分支）的内容为hexo/public hexo目录下的内容可手动部署到Pages仓库的hexo分支进行保存 写博客 命令:hexo new “blog name” 文件位置： hexo/source/_posts 生成：hexo g 本地启动：hexo s 部署到GitHub：hexo d 参考文档 删博客 删除 source/_posts下文件 hexo clean hexo g hexo s hexo d 常用命令 hexo clean ：清理 hexo g ：生成 hexo d ：部署 hexo s ：启动本地server （localhost：4000） hexo new [layout] &lt;titile&gt;1hexo有三种默认布局：post、page、draft 默认为post]]></content>
      <categories>
        <category>环境搭建</category>
        <category>GitHub Pages</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
</search>
